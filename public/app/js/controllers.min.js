(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('CheckpointAdminCtrl',['User', 'Auth', 'Checkpoint', 'LxNotificationService', 'LxDatePickerService', '$state', '$stateParams', CheckpointAdminCtrl]);

	function CheckpointAdminCtrl(User, Auth, Checkpoint, LxNotificationService, LxDatePickerService, $state, $stateParams){
		var vm = this;
		// Props
    vm.checkpoint = {};
		vm.questions = [];
    vm.checkpointQuestions = [];
		vm.isUploaded = {
			state: false,
			msg: '',
			isLoading: false,
		};
		// Methods
    vm.getCheckpoint = getCheckpoint;
		vm.getQuestions = getQuestions;
    vm.addQuestion = addQuestion;
    vm.deleteQuestion = deleteQuestion;
    vm.createQuestions = createQuestions;
		vm.openDatePicker = openDatePicker;
		vm.datePickerCallback = datePickerCallback;
		// Methods implementation
		function getQuestions(){
			Checkpoint.getQuestions($stateParams.checkpointId).then(function(data){
				if(data.success){
					vm.questions = data.questions;
				}else{
					alert(data.msg);
				}
			}, function(err){
        console.error('Hubo un error en el servidor');
			});
		};
    function getCheckpoint(){
			Checkpoint.getCheckpoint($stateParams.id, $stateParams.checkpointId).then(function(data){
				if(data.success){
					vm.checkpoint = data.checkpoint;
				}else{
					alert(data.msg);
				}
			}, function(err){
        console.error('Hubo un error en el servidor');
			});
		};
    function createQuestions(){
      if(vm.checkpointQuestions.length == 0){
        vm.isUploaded.state = true;
        vm.isUploaded.msg = 'Debes crear almenos una pregunta';
        return;
      }
			vm.isUploaded.isLoading = true;
			vm.isUploaded.state = false;
			Checkpoint.createQuestions($stateParams.checkpointId, {questions: vm.checkpointQuestions}).then(function(data){
				if(data.success){
					vm.getQuestions();
          vm.checkpointQuestions = [];
				}else{
					vm.isUploaded.isLoading = false;
					vm.isUploaded.state = true;
					vm.isUploaded.msg = data.msg;
				}
			}, function(data){
        vm.isUploaded.isLoading = false;
				console.error('Hubo un error en el servidor');
			});
		};
    function addQuestion(){
      vm.checkpointQuestions.push({
        id: Date.now(),
        type: {
          id: 0,
          label: 'Ninguno'
        },
        question: ''
      });
    };
    function deleteQuestion(id){
      var pos = 0;
      for (var i = 0; i < vm.checkpointQuestions.length; i++) {
        if(vm.checkpointQuestions[i].id == id){
          pos = i;
          break;
        }
      }
      vm.checkpointQuestions.splice(pos, 1);
    }
		function openDatePicker(pickerid){
			LxDatePickerService.open(pickerid);
		};
		function datePickerCallback(_newdate, pickerid){
				if(pickerid == 'BEGIN'){
					vm.newStage.beginDate.date = _newdate;
	        vm.newStage.beginDate.formatted = moment(_newdate).locale(vm.newStage.locale).format('L');
				}else{
					vm.newStage.endDate.date = _newdate;
					vm.newStage.endDate.formatted = moment(_newdate).locale(vm.newStage.locale).format('L');
				}
    };
		// Methods self invoking
		vm.getQuestions();
    vm.getCheckpoint();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('CreateStageAdminCtrl',['User', 'Auth', 'Stage', 'LxNotificationService', 'LxDatePickerService' , '$state', CreateStageAdminCtrl]);

	function CreateStageAdminCtrl(User, Auth, Stage, LxNotificationService, LxDatePickerService, $state){
		var vm = this;
		// Props
		vm.stages = [];
		vm.newStage = {
			name: '',
			desc: '',
			locale: 'es',
			minDate: new Date(new Date().getFullYear(), new Date().getMonth() - 2, new Date().getDate()),
			maxDate: new Date(new Date().getFullYear(), new Date().getMonth() + 2, new Date().getDate()),
			beginDate: {
				id: '_begin',
				date: new Date(),
				formatted: moment().locale('es').format('L'),
			},
			endDate: {
					id: '_end',
					date: new Date(),
					formatted: moment().locale('es').format('L'),
			},
		};
		vm.isUploaded = {
			state: false,
			msg: '',
			isLoading: false,
		};
		// Methods
		vm.getStages = getStages;
		vm.openDatePicker = openDatePicker;
		vm.datePickerCallback = datePickerCallback;
		vm.createStage = createStage;
		// Methods implementation
		function getStages(){
			Stage.getStages().then(function(data){
				if(data.success){
					console.log(data.stages);
					vm.stages = data.stages;
				}else{
					alert(data.msg);
				}
			}, function(err){

			});
		};
		function openDatePicker(pickerid){
			LxDatePickerService.open(pickerid);
		};
		function datePickerCallback(_newdate, pickerid){
				if(pickerid == 'BEGIN'){
					vm.newStage.beginDate.date = _newdate;
	        vm.newStage.beginDate.formatted = moment(_newdate).locale(vm.newStage.locale).format('L');
				}else{
					vm.newStage.endDate.date = _newdate;
					vm.newStage.endDate.formatted = moment(_newdate).locale(vm.newStage.locale).format('L');
				}
    };
		function createStage(){
			vm.isUploaded.isLoading = true;
			vm.isUploaded.state = false;
			var stageData = {
					name: vm.newStage.name,
					desc: vm.newStage.desc,
					beginDate: vm.newStage.beginDate.formatted.split('/').reverse().join('-'),
					endDate: vm.newStage.endDate.formatted.split('/').reverse().join('-'),
			};
			Stage.createStage(stageData).then(function(data){
				if(data.success){
					$state.go('admin.stage', {id: data.stageId});
				}else{
					vm.isUploaded.isLoading = false;
					vm.isUploaded.state = true;
					vm.isUploaded.msg = data.msg;
				}
			}, function(data){
				console.error('Hubo un error en el servidor');
			});
		};
		// Methods self invoking
		vm.getStages();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('DashboardAdminCtrl',['User', 'Auth', 'Stage', 'LxNotificationService', '$state', DashboardAdminCtrl]);

	function DashboardAdminCtrl(User, Auth, Stage, LxNotificationService, $state){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.userData = {};
		vm.stages = []
		// Methods
		vm.getStages = getStages;
		// Methods implementation
		function getStages(){
			Stage.getStages().then(function(data){
				if(data.success){
					console.log(data.stages);
					vm.stages = data.stages;
				}else{
					alert(data.msg);
				}
			}, function(err){
				console.error('Hubo un error en el servidor');
			});
		};
		// Methods self invoking
		vm.getStages();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('ExpertAdminCtrl',['User', 'Auth', 'Team', 'Expert', 'Request', 'LxNotificationService', ExpertAdminCtrl]);

	function ExpertAdminCtrl(User, Auth, Team, Expert, Request, LxNotificationService){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.userData = {};
		vm.experts = [];
		// Methods
		vm.getExperts = getExperts;
		vm.processRequest = processRequest;
		// Methods implementation
		function getExperts(){
			Expert.getExperts().then(function(data){
				if(data.success){
					console.log(data);
					vm.experts = data.experts;
				}else{
					alert(data.msg);
				}
			}, function(err){

			});
		};
		function processRequest(id, bool){
			var title = bool ? 'Esta seguro que desea aprobarlo para ser juez/experto?' : 'Esta seguro que desea rechazarlo para ser juez/experto?'
			LxNotificationService.confirm(title, '', {
				cancel: 'Cancelar',
				ok: 'Si, deseo hacerlo',
			}, function (answer){
				if(answer){
					var data = {id: id, accept: bool};
					Request.confirmRequest(data).then(function(data){
						if(data.success){
							vm.getExperts();
							vm.getJudges();
							LxNotificationService.success('La acción fue realizada con éxito');
						}else{
							LxNotificationService.warn('Hubo un error al realizar la acción');
						}
					}, function(err){
						LxNotificationService.error('Hubo un error al realizar la acción')
					});
				}else{
					return;
				}
			});
		};
		// Methods self invoking
		vm.getExperts();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('HeaderAdminCtrl',['Auth',  HeaderAdminCtrl]);

	function HeaderAdminCtrl(Auth){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		// Methods
		vm.logout = logout;

		// Methos implementation
		function logout(){
			Auth.logout();
		};
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('JudgeAdminCtrl',['User', 'Auth', 'Team', 'Judge', 'Request', 'LxNotificationService', JudgeAdminCtrl]);

	function JudgeAdminCtrl(User, Auth, Team, Judge, Request, LxNotificationService){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.userData = {};
		vm.judges = [];
		// Methods
		vm.getJudges = getJudges;
		vm.processRequest = processRequest;
		// Methods implementation
		function getJudges(){
			Judge.getJudges().then(function(data){
				if(data.success){
					console.log(data);
					vm.judges = data.judges;
				}else{
					alert(data.msg);
				}
			}, function(err){

			});
		};
		function processRequest(id, bool){
			var title = bool ? 'Esta seguro que desea aprobarlo para ser juez/experto?' : 'Esta seguro que desea rechazarlo para ser juez/experto?'
			LxNotificationService.confirm(title, '', {
				cancel: 'Cancelar',
				ok: 'Si, deseo hacerlo',
			}, function (answer){
				if(answer){
					var data = {id: id, accept: bool};
					Request.confirmRequest(data).then(function(data){
						if(data.success){
							vm.getExperts();
							vm.getJudges();
							LxNotificationService.success('La acción fue realizada con éxito');
						}else{
							LxNotificationService.warn('Hubo un error al realizar la acción');
						}
					}, function(err){
						LxNotificationService.error('Hubo un error al realizar la acción')
					});
				}else{
					return;
				}
			});
		};
		// Methods self invoking
		vm.getJudges();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('LoginAdminCtrl',['$state', '$timeout', 'Auth', LoginAdminCtrl]);

	function LoginAdminCtrl($state, $timeout, Auth){
		var vm = this;
		vm.creds = {
			email: '',
			password: ''
		};
		vm.loginAdminState = {
			isNotLogged: false,
			msg: '',
			isLoading: false
		};

		vm.loginAdmin = loginAdmin;

		function loginAdmin(){
			vm.loginAdminState.isNotLogged = false;
			vm.loginAdminState.isLoading = true;
			Auth.login(vm.creds).then(function(data){
				if(data.success){
					console.log(data);
					Auth.setSession(data.uid, data.rid, data.username,
												data.token, data.min_fields, data.has_team,
											 	data.team_id, data.is_leader);
					$state.go(data.path)
					console.log(Auth.getSession());
				}else{
					vm.loginAdminState.isNotLogged = true;
					vm.loginAdminState.isLoading = false;
					vm.loginAdminState.msg = data.msg
				}
			}, function(err){
				console.error('Problema en el servidor');
			});
		};
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('StageAdminCtrl',['User', 'Auth', 'Stage', 'Checkpoit', 'LxNotificationService', 'LxDatePickerService' , '$state', '$stateParams', StageAdminCtrl]);

	function StageAdminCtrl(User, Auth, Stage, Checkpoint, LxNotificationService, LxDatePickerService, $state, $stateParams){
		var vm = this;
		// Props
		vm.checkpoints = [];
    vm.stage = {};
		vm.isUploaded = {
			state: false,
			msg: '',
			isLoading: false,
		};
		vm.newCheckpoint = {
			name: '',
			locale: 'es',
			minDate: new Date(new Date().getFullYear(), new Date().getMonth() - 2, new Date().getDate()),
			maxDate: new Date(new Date().getFullYear(), new Date().getMonth() + 2, new Date().getDate()),
			evalDate: {
				id: '_eval',
				date: new Date(),
				formatted: moment().locale('es').format('L'),
			},
		};
		// Methods
		vm.getCheckpoints = getCheckpoints;
    vm.getStage = getStage;
		vm.openDatePicker = openDatePicker;
		vm.datePickerCallback = datePickerCallback;
		vm.createCheckpoint = createCheckpoint;
		// Methods implementation
		function getCheckpoints(){
			Checkpoint.getCheckpoints($stateParams.id).then(function(data){
				if(data.success){
					vm.checkpoints = data.checkpoints;
				}else{
					alert(data.msg);
				}
			}, function(err){
				console.error('Hubo un error en el servidor');
			});
		};
		function getStage(){
      Stage.getStage($stateParams.id).then(function(data){
        if(data.success){
          vm.stage = data.stage;
        }else{
          console.warn(data.msg);
        }
      }, function(data){
        console.error('Hubo un error en el servidor');
      });
    };
		function openDatePicker(pickerid){
			LxDatePickerService.open(pickerid);
		};
		function datePickerCallback(_newdate, pickerid){
				if(pickerid == 'EVAL'){
					vm.newCheckpoint.evalDate.date = _newdate;
	        vm.newCheckpoint.evalDate.formatted = moment(_newdate).locale(vm.newCheckpoint.locale).format('L');
				}
    };
		function createCheckpoint(){
			vm.isUploaded.isLoading = true;
			vm.isUploaded.state = false;
			var checkpointData = {
					stageId: $stateParams.id,
					name: vm.newCheckpoint.name,
					evalDate: vm.newCheckpoint.evalDate.formatted.split('/').reverse().join('-'),
			};
			Checkpoint.createCheckpoint(checkpointData).then(function(data){
				if(data.success){
					$state.go('admin.stage.checkpoint', {stageId: $stateParams.id, checkpointId: data.checkId});
				}else{
					vm.isUploaded.isLoading = false;
					vm.isUploaded.state = true;
					vm.isUploaded.msg = data.msg;
				}
			}, function(data){
				console.error('Hubo un error en el servidor');
			});
		};
		// Methods self invoking
		vm.getCheckpoints();
    vm.getStage();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('MentorProfileCtrl', ['$stateParams', 'User', 'Mentor', 'Auth', 'Team', 'LxNotificationService', MentorProfileCtrl]);

	function MentorProfileCtrl($stateParams, User, Mentor, Auth, Team, LxNotificationService){
		var vm = this;
		// Props
		vm.mentorData = {
			names: '',
			lastnames: '',
			img: '',
			email: '',
			birthDate: '',
			genre: '',
			school: '',
			city: '',
			zone: '',
			bio: '',
		};
		vm.uploadInvitation = {
			isLoading: false,
		};
		vm.isMemberInvited = false;
		vm.authParams = Auth.getSession();
		// Methods
		vm.getMentorData = getMentorData;
		vm.inviteToTeam = inviteToTeam;
		vm.hasInvited = hasInvited;
		vm.cancelInvitation = cancelInvitation;
		// Methods implementation
		function getMentorData(id){
			User.getInfo(id).then(function(data){
				if(data.success){
					console.log(data.user);
					vm.mentorData = data.user;
					vm.isMemberInvited = vm.hasInvited();
				}else{
					console.warn(data.msg);
				}
			}, function(err){
				alert('Hubo un error');
			});
		};
		function inviteToTeam(id){
			if(!vm.authParams.hasTeam){
				LxNotificationService.alert('Debes crear un equipo o unirte a uno', '', 'Esta bien', function(answer){
					return;
				});
			}else{
				vm.uploadInvitation.isLoading = true;
				Team.inviteToTeam({uid: id, teamId: vm.authParams.teamId, role: vm.mentorData.role_id}).then(function(data){
					if(data.success){
						LxNotificationService.alert('Felicidades', 'La invitación fue enviada con éxito', 'OK', function(answer){
							return;
						});
						vm.getMentorData($stateParams.id);
						vm.isMemberInvited = vm.hasInvited();
					}else{
						LxNotificationService.warning(data.msg);
					}
				}, function(err){
					LxNotificationService.error('Hubo un error en el servidor');
				});
				vm.uploadInvitation.isLoading = false;
			}
		};
		function hasInvited(){
			var invitations = vm.mentorData.invitations;
			for (var i = 0; i < invitations.length; i++) {
				if(invitations[i].team_id == vm.authParams.teamId){
					vm.mentorData.invitationId = invitations[i].invitation_id;
					return true;
				}
			}
			return false;
		};
		function cancelInvitation(){
			Team.confirmInvitationFromTeam({invitationId: vm.mentorData.invitationId, accept: false}).then(function(data){
				if(data.success){
					getMentorData($stateParams.id);
					LxNotificationService.success('La invitación fue cancelada');
				}else{
					LxNotificationService.warning('Hubo un error al cancelar la invitación');
				}
			}, function(err){
				LxNotificationService.error('Hubo un error en el servidor, revise su conexión a internet');
			});
		}
		// Methods self invoking
		getMentorData($stateParams.id);
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('MentorsCtrl',['User', 'Mentor', MentorsCtrl]);
	function MentorsCtrl(User, Mentor){
		var vm = this;
		// Props
		vm.mentors = [];
		vm.filters = {
			cities: ['La Paz', 'El Alto'],
			withTeam: true,
			skills: ['AppInventor', 'Java', 'Android', 'Diseño', 'Documentación', 'Emprendimiento'],
		};
		// Methods
		vm.getMentors = getMentors;
		vm.updateFilter = updateFilter;
		// Methods implementation
		function getMentors(){
			Mentor.getMentors().then(function(data){
				if(data.success){
					console.log(data);
					vm.mentors = data.mentors;
				}else{
					alert(data.msg);
				}
			}, function(err){

			});
		};
		function updateFilter(type, arg){
			var index = vm.filters[type].indexOf(arg);
			if(index == -1){
				vm.filters[type].push(arg);
			}else{
				vm.filters[type].splice(index, 1);
			}
		};
		// Methods self invoking
		getMentors();
	};
})();

(function(){
  angular.module('heroesDigitalesApp')
    .controller('AuthParentsCtrl', ['$stateParams', '$state', 'LxNotificationService', 'Student', AuthParentsCtrl]);
  function AuthParentsCtrl($stateParams, $state, LxNotificationService, Student){
    var vm = this;
    // Methods
    vm.accept = accept;

    // Method implementation
    function accept(){
      var authParams = {
        rid: $stateParams.id,
        token: $stateParams.token
      };
      Student.parentAuth(authParams).then(function(data){
        if(data.success){
          LxNotificationService.confirm('Felicitaciones', data.msg,
            {
                ok: 'Ver página de inicio',
                cancel: 'No gracias'
            }, function(answer){
                if (answer) $state.go('home');
                else return;
            });
        }else{
          LxNotificationService.warning(data.msg);
        }
      }, function(data){
        LxNotificationService.error('Hubo un error al procesar la autorización, revise su conexión a internet');
      });
    }

  };
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
	.controller('EmailConfirmationCtrl',['$stateParams', '$state', '$timeout', 'User', 'Auth', EmailConfirmationCtrl]);
	function EmailConfirmationCtrl($stateParams, $state, $timeout, User, Auth){
		var vm = this;
		// Props
		vm.authParams = {
			uid: $stateParams.uid,
			token: $stateParams.token,
			email: $stateParams.email,
			password: ''
		};
		vm.isSubmited = {
			state: false,
			success: {
				state: false,
				msg: ''
			}
		};
		// Methods
		vm.confirmRoute = confirmRoute;
		// Methods implementation
		function confirmRoute(){
			vm.isSubmited.state = true;
			vm.isSubmited.success.state = false;
			User.confirmEmail(vm.authParams).then(function(data){
				if(data.success){
					if(data.already_verif)
						$state.go(data.path);
					Auth.setSession(data.uid, data.rid, data.username, data.token);
					$state.go(data.path);
				}else{
					vm.isSubmited.success.msg = data.msg;
					vm.isSubmited.success.state = true;
					vm.isSubmited.state = false;
				}
			}, function(err){
				alert('Problema con el servidor, revise su conexión a internet');
			});
		};
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
	.controller('ForgotPasswordCtrl', ['$state', '$timeout', 'User', 'Auth', ForgotPasswordCtrl]);

	function ForgotPasswordCtrl($state, $timeout, User, Auth){
		var vm = this;
		// Props
		vm.passwordParams = {
			password: ''
		};
		vm.isSubmited = {
			state: false,
			msg: '',
			isLoading: false,
		};
		// Methods
		vm.sendEmail = sendEmail;
		// Methods implementation
		function sendEmail(){
			vm.isSubmited.state = false;
			vm.isSubmited.isLoading = true;
			User.sendVerifEmail(vm.passwordParams).then(function(data){
				if(data.success){
					$state.go('home.success-email-verif');
				}else{
					vm.isSubmited.state = true;
					vm.isSubmited.isLoading = false;
					vm.isSubmited.msg = data.msg;
				}
			}, function(err){
				alert('Hubo un error en el servidor');
			});
		};
	};
})();

(function(){
  angular.module('heroesDigitalesApp')
    .controller('HomeCtrl', [HomeCtrl]);
  function HomeCtrl(){
    var vm = this;
    vm.organizers = [
      'auspiciadores-02.png',
      'auspiciadores-03.png',
    ];
    vm.sponsors = [
      'auspiciadores-04.png',
      'auspiciadores-05.png',
      'auspiciadores-06.png',
      'auspiciadores-07.png',
      'auspiciadores-08.png',
      'auspiciadores-09.png',
      'auspiciadores-10.png',
      'auspiciadores-11.png',
    ];
  };
})();

(function(){
	"use strict";
	function LoginCtrl($state, $timeout, Auth){
		var vm = this;
		vm.creds = {
			email: "",
			password: ""
		};
		vm.loginState = {
			isNotLogged: false,
			msg: "",
			isLoading: false
		};

		vm.login = login;

		function login(){
			vm.loginState.isNotLogged = false;
			vm.loginState.isLoading = true;
			Auth.login(vm.creds).then(function(data){
				if(data.success){
					console.log(data);
					$timeout(function(){
						$state.go(data.path);
					}, 1000);
					Auth.setSession(data.uid, data.rid, data.username,
												data.token, data.min_fields, data.has_team,
											 	data.team_id, data.is_leader);
					console.log(Auth.getSession());
					$("#login").modal("hide");
				}else{
					vm.loginState.isNotLogged = true;
					vm.loginState.isLoading = false;
					vm.loginState.msg = data.msg
				}
			}, function(err){
				console.error("Problema en el servidor");
			});
		};
	};
	angular.module("heroesDigitalesApp")
	.controller("LoginCtrl",["$state", "$timeout", "Auth", LoginCtrl]);
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
	.controller('RegisterSuccessCtrl', ['$state', '$timeout', RegisterSuccessCtrl]);
	function RegisterSuccessCtrl($state, $timeout){
		
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
	.controller('ResetPasswordCtrl', ['$state', '$stateParams', 'User', ResetPasswordCtrl]);

	function ResetPasswordCtrl($state, $stateParams, User){
		var vm = this;
		// Props
		vm.passwordParams = {
			password: '',
			retype: '',
			uid: $stateParams.id,
			token: $stateParams.token,
		};
		vm.isSubmited = {
			state: false,
			msg: '',
			isLoading: false,
		};
		// Methods
		vm.resetPassword = resetPassword;
		var checkPassword = checkPassword;
		// Methods implementation
		function resetPassword(){
			console.log(vm.passwordParams);
			if(!checkPassword(vm.passwordParams.password, vm.passwordParams.retype)){
				vm.isSubmited.state = true;
				vm.isSubmited.msg = 'Las contraseñas no coinciden';
				return;
			}
			vm.isSubmited.state = false;
			vm.isSubmited.isLoading = true;
			User.resetPassword(vm.passwordParams).then(function(data){
				if(data.success){
					$state.go('home.success-reset-password');
				}else{
					vm.isSubmited.isLoading = false;
					vm.isSubmited.msg = data.msg;
				}
			}, function(err){
				alert('Hubo un error en el servidor');
			});
		};
		function checkPassword(password, retype){
			if(password != retype)
				return false;
			return true;
		};
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
	.controller('UserRegisterCtrl', ['$stateParams', '$state', 'City', 'Shirt', 'Genre', 'Register', 'LxNotificationService', UserRegisterCtrl]);

	function UserRegisterCtrl($stateParams, $state, City, Shirt, Genre, Register, LxNotificationService){
		var vm = this;
		// Methods
		vm.getCities = getCities;
		vm.getGenres = getGenres;
		vm.getShirts = getShirts;
		vm.generateYears = generateYears;
		vm.sendRegistration = sendRegistration;
		vm.validateSocialNetwork = validateSocialNetwork;
		var setRegProps = setRegProps;
		var retypePassword = retypePassword;
		var validateCV = validateCV;
		// Props
		vm.typeReg = $stateParams.type;
		vm.typeParams = {};
		vm.isNotRegistered = {
			state: false,
			msg: '',
			isLoading: false,
		};
		vm.dataRegister = {
			type: vm.typeReg,
			typeRegister: $stateParams.typeRegister,
			teamId: $stateParams.teamId,
			names: '',
			lastnames: '',
			birthDate: {
				day: 'Día',
				month: 'Mes',
				year: 'Año'
			},
			cellphone: '',
			cityId: 0,
			zone: '',
			genreId: 0,
			school: '',
			email: '',
			shirtId: 0,
			socialNetwork: '',
			password: '',
			retype: '',
			org: '',
			job: '',
			profession: '',
			cv: {},
		};
		vm.cities = [];
		vm.schools = [];
		vm.shirts = [];
		vm.genres = [];
		vm.dates = {
			days: [
				'Día',
				'01',
				'02',
				'03',
				'04',
				'05',
				'06',
				'07',
				'08',
				'09',
				'10',
				'11',
				'12',
				'13',
				'14',
				'15',
				'16',
				'17',
				'18',
				'19',
				'20',
				'21',
				'22',
				'23',
				'24',
				'25',
				'26',
				'27',
				'28',
				'29',
				'30',
				'31',
			],
			months: [
				'Mes',
				'01',
				'02',
				'03',
				'04',
				'05',
				'06',
				'07',
				'08',
				'09',
				'10',
				'11',
				'12',
			],
			years: ['Año']
		};
		// Declaration of methods
		/**
		 * setRegProps: Determina que tipo de usuario
		 * 				realizará un registro
		 * @param string type: Tipo de usuario
		 */
		function setRegProps(type){
			if(type == 'student'){
				vm.typeParams.title = 'Estudiante';
			}else if(type == 'mentor'){
				vm.typeParams.title = 'Mentor';
			}else if(type == 'judge'){
				vm.typeParams.title = 'Juez';
			}else if(type == 'expert'){
				vm.typeParams.title = 'Experto';
			}
			return;
		};
		/**
		 * getCities: Hace la llamada al servicio City
		 * 			  para obtener las ciudades de la BD
		 * @return void
		 */
		function getCities(){
			City.getCities().then(function(data){
				if(data.success)
					vm.cities = data.cities;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		/*
		 * getCities: Hace la llamada al servicio Genre
		 * 			  para obtener los tipos de genero
		 * @return void
		 */
		function getGenres(){
			Genre.getGenres().then(function(data){
				if(data.success)
					vm.genres = data.genres;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		/*
		 * getCities: Hace la llamada al servicio Genre
		 * 			  para obtener los tipos de genero
		 * @return void
		 */
		function getShirts(){
			Shirt.getShirts().then(function(data){
				if(data.success)
					vm.shirts = data.shirts;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		function generateYears(){
			var actYear = new Date().getFullYear();
			for (var i = 1960; i <= actYear; i++) {
				vm.dates.years.push(i);
			};
			return;
		};
		function retypePassword(newPass, retype){
			if(newPass != retype){
				vm.isNotRegistered.state = true;
				vm.isNotRegistered.msg = 'Su contraseña no coincide, escribala nuevamente';
				return false;
			}
			return true;
		};
		function sendRegistration(){
			if(!Number.isInteger(Number(vm.dataRegister.cellphone))){
				vm.isNotRegistered.state = true;
				vm.isNotRegistered.msg = 'Debe introducir un número de teléfono';
				return;
			}
			if((vm.typeReg == 'judge' || vm.typeReg == 'expert')
					&& (!vm.validateSocialNetwork(vm.dataRegister.socialNetwork)
					|| !validateCV(vm.dataRegister.cv))) return;
			if(!retypePassword(vm.dataRegister.password, vm.dataRegister.retype)) return;
			vm.isNotRegistered.state = false;
			vm.isNotRegistered.isLoading = true;
			// Validar que el retype es igual al password
			Register.register(vm.dataRegister).then(function(data){
				if(data.success){
					if(data.emailSended == 'NOT_SENDED')
						LxNotificationService.alert('Felicitaciones', data.msg, 'OK', function(answer){ $state.go('home') });
					else
						$state.go('home.success-register');
				}else{
					vm.isNotRegistered.state = true;
					vm.isNotRegistered.isLoading = false;
					vm.isNotRegistered.msg = data.msg;
				}
			}, function(err){
				vm.isNotRegistered.state = true;
				vm.isNotRegistered.isLoading = false;
				vm.isNotRegistered.msg = 'Hubo un error al realizar su registro, revise su conexión a internet e inténtelo nuevamente';
			});
		};
		function validateSocialNetwork(text){
			if((text == undefined || text == '') || (text.search(/linkedin/i) == -1 && text.search(/facebook/i) == -1)){
				vm.isNotRegistered.state = true;
				vm.isNotRegistered.msg = 'Debes enlazar tu cuenta de Facebook o LinkedIn';
				return false;
			}else{
				vm.isNotRegistered.state = false;
			}
			return true;
		}
		function validateCV(cv){
			if(angular.equals(cv, {})){
				vm.isNotRegistered.state = true;
				vm.isNotRegistered.msg = 'Debes subir tu curriculum vitae';
				return false;
			}else{
				vm.isNotRegistered.state = false;
			}
			return true;
		}
		// Self execution functions
		setRegProps(vm.typeReg);
		getCities();
		getShirts();
		getGenres();
		generateYears();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('StudentProfileCtrl',['$stateParams', 'User', 'Student', 'Auth', 'Team', 'LxNotificationService', StudentProfileCtrl]);

	function StudentProfileCtrl($stateParams, User, Student, Auth, Team, LxNotificationService){
		var vm = this;
		// Props
		vm.studentData = {
			names: '',
			lastnames: '',
			img: '',
			email: '',
			birthDate: '',
			genre: '',
			school: '',
			city: '',
			zone: '',
			bio: '',
		};
		vm.uploadInvitation = {
			isLoading: false,
		};
		vm.isMemberInvited = false;
		vm.authParams = Auth.getSession();
		// Methods
		vm.getStudentData = getStudentData;
		vm.inviteToTeam = inviteToTeam;
		vm.hasInvited = hasInvited;
		vm.cancelInvitation = cancelInvitation;
		// Methods implementation
		function getStudentData(id){
			User.getInfo(id).then(function(data){
				if(data.success){
					vm.studentData = data.user;
					console.log(vm.studentData);
					vm.isMemberInvited = vm.hasInvited();
				}else{
					console.warn(data.msg);
				}
			}, function(err){
				alert('Hubo un error');
			});
		};
		function inviteToTeam(id){
			if(!vm.authParams.hasTeam){
				LxNotificationService.alert('Debes crear un equipo o unirte a uno', '', 'Esta bien', function(answer){
					return;
				});
			}else{
				vm.uploadInvitation.isLoading = true;
				Team.inviteToTeam({uid: id, teamId: vm.authParams.teamId, role: vm.studentData.role_id}).then(function(data){
					if(data.success){
						LxNotificationService.alert('Felicidades', 'La invitación fue enviada con éxito', 'OK', function(answer){
							return;
						});
						vm.getStudentData($stateParams.id);
						vm.isMemberInvited = vm.hasInvited();
					}else{
						LxNotificationService.warning(data.msg);
					}
				}, function(err){
					LxNotificationService.error('Hubo un error en el servidor');
				});
				vm.uploadInvitation.isLoading = false;
			}
		};
		function hasInvited(){
			var invitations = vm.studentData.invitations;
			for (var i = 0; i < invitations.length; i++) {
				if(invitations[i].team_id == vm.authParams.teamId){
					vm.studentData.invitationId = invitations[i].invitation_id;
					return true;
				}
			}
			return false;
		};
		function cancelInvitation(){
			Team.confirmInvitationFromTeam({invitationId: vm.studentData.invitationId, accept: false}).then(function(data){
				if(data.success){
					getStudentData($stateParams.id);
					LxNotificationService.success('La invitación fue cancelada');
				}else{
					LxNotificationService.warning('Hubo un error al cancelar la invitación');
				}
			}, function(err){
				LxNotificationService.error('Hubo un error en el servidor, revise su conexión a internet');
			});
		}
		// Methods self invoking
		getStudentData($stateParams.id);
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('StudentsCtrl',['User', 'Student', StudentsCtrl]);

	function StudentsCtrl(User, Student){
		var vm = this;
		// Props
		vm.students = [];
		vm.filters = {
			cities: ['La Paz', 'El Alto'],
			withTeam: true,
		};
		// Methods
		vm.getStudents = getStudents;
		vm.updateFilter = updateFilter;
		// Methods implementation
		function getStudents(){
			Student.getStudents().then(function(data){
				if(data.success){
					console.log(data);
					vm.students = data.students;
				}else{
					alert(data.msg);
				}
			}, function(err){

			});
		};
		function updateFilter(type, arg){
			var index = vm.filters[type].indexOf(arg);
			if(index == -1){
				vm.filters[type].push(arg);
			}else{
				vm.filters[type].splice(index, 1);
			}
		};
		// Methods self invoking
		getStudents();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('EditTeamProfileCtrl',['$state', '$stateParams', 'User', 'Team', 'Auth', 'Division', 'City', 'Category', EditTeamProfileCtrl]);

	function EditTeamProfileCtrl($state, $stateParams, User, Team, Auth, Division, City, Category){
		var vm = this;
		// Methods
		vm.getCities = getCities;
		vm.getDivisions = getDivisions
		vm.getCategories = getCategories;
		vm.getTeamInfo = getTeamInfo;
		vm.editTeam = editTeam;
		vm.matchCategoryDesc = matchCategoryDesc
		// Props
		vm.isSubmited = {
			state: false,
			msg: '',
			isLoading: false,
		};
		vm.teamData = {
			idLeader: $stateParams.idLeader,
			team_name: '',
			project_name: '',
			project_desc: '',
			city_d: 0,
			category_id: 0,
			division_id: 0,
		};
		vm.cities = [];
		vm.divisions = [];
		vm.categories = [];
		// Methods implementation
		/**
		 * getCities: Hace la llamada al servicio City
		 * 			  para obtener las ciudades de la BD
		 * @return void
		 */
		function getCities(){
			City.getCities().then(function(data){
				if(data.success)
					vm.cities = data.cities;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		/**
		 * getZoes: Hace la llamada al servicio Zone
		 * 			  para obtener las zonas de la BD
		 * @return void
		 */
		function getCategories(){
			Category.getCategories().then(function(data){
				if(data.success)
					vm.categories = data.categories;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		/**
		 * getCities: Hace la llamada al servicio Genre
		 * 			  para obtener los tipos de genero
		 * @return void
		 */
		function getDivisions(){
			Division.getDivisions().then(function(data){
				if(data.success)
					vm.divisions = data.divisions;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		function getTeamInfo(){
			Team.getTeam($stateParams.id).then(function(data){
				if(data.success){
					console.log(data);
					vm.teamData = data.team;
					vm.teamData.cityId = data.team.city.id;
					vm.teamData.categoryId = data.team.category.id;
					vm.teamData.divisionId = data.team.division.id;
					console.log(vm.teamData);
				}else{
					console.warn(data.msg);
				}
			}, function(err){
				alert('Hubo un error en el servidor');
			});
		};
		function editTeam(){
			Team.editTeam(vm.teamData).then(function(data){
				if(data.success){
					$state.go('user.team-profile', {id: $stateParams.id});
				}else{
					console.warn(data.msg);
				}
			}, function(err){

			});
		};
		function matchCategoryDesc(cid){
			for (var i = 0; i < vm.categories.length; i++) {
				if(vm.categories[i].id == cid){
					vm.categoryDesc = vm.categories[i].desc;
					return;
				}
			}
			vm.categoryDesc = 'Debe seleccionar una categoría para el equipo';
		}
		// Methods self invoking
		getCities();
		getCategories();
		getDivisions();
		getTeamInfo();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('TeamProfileCtrl',['$stateParams', 'User', 'Team', 'Auth', 'LxNotificationService', TeamProfileCtrl]);

	function TeamProfileCtrl($stateParams, User, Team, Auth, LxNotificationService){
		var vm = this;
		// Props
		vm.teamData = {};
		vm.userCreds = Auth.getSession();
		vm.hasTeam = vm.userCreds.hasTeam;
		vm.isMTeam = {
			state: ($stateParams.id == vm.userCreds.teamId) ? true : false,
			isLeader: vm.userCreds.isLeader,
			uid: vm.userCreds.id,
		};
		vm.teamImg = {
			id: $stateParams.id,
			newImg: null,
		};
		vm.uploadImg = {
			isLoading: false,
		};
		vm.uploadRequest = {
			isLoading: false,
			msg: '',
			success: true,
		};
		vm.userHasSentReq = false;
		// Methods
		vm.getTeamData = getTeamData;
		vm.inviteToTeam = inviteToTeam;
		vm.updateTeamImg = updateTeamImg;
		vm.joinTeam = joinTeam;
		vm.requestHasSent = requestHasSent;
		// Methods implementation
		function getTeamData(id){
			Team.getTeam(id).then(function(data){
				if(data.success){
					console.log(data.team);
					vm.teamData = data.team;
				}else{
					console.warn(data.msg);
				}
			}, function(err){
				alert('Hubo un error');
			});
		};
		function inviteToTeam(){
			if(!Auth.hasTeam()){
				alert('Debes crear un equipo o unirte a uno');
				return;
			}
		};
		function updateTeamImg(){
			vm.uploadImg.isLoading = true;
			if(vm.teamImg.newImg == null)
				return;
			Team.editTeamImg(vm.teamImg).then(function(data){
				if(data.success){
					vm.teamData.img = data.updated_img;
					vm.teamImg.newImg = null;
				}else{
					console.warn(data.msg);
				}
				vm.uploadImg.isLoading = false;
			}, function(err){
				alert('Hubo un error en el servidor');
			});
		};
		function joinTeam(idTeam){
			vm.uploadRequest.isLoading = true;
			Team.requestJoin({idUser: vm.userCreds.id, idTeam: idTeam, role: vm.userCreds.role}).then(function(data){
				if(data.success){
					LxNotificationService.alert('FELICIDADES','Tu solicitud fue enviada con éxito, la respuesta llegará a tu correo electrónico', 'OK', function(answer){
						return;
					});
					vm.requestHasSent();
				}else{
					vm.uploadRequest.msg = data.msg;
					vm.uploadRequest.success = false;
				}
				vm.uploadRequest.isLoading = false;
			}, function(err){
				alert('Hubo un error en el servidor');
			});
		};
		function requestHasSent(){
			User.requestHasSent($stateParams.id, vm.userCreds.id, vm.userCreds.role).then(function(data){
				console.log(vm.userHasSentReq);

				if(data.success)
					vm.userHasSentReq = data.isSent;
				else
					LxNotificationService.warning(data.msg);
			}, function(err){
				LxNotificationService.error('Hubo un error en el servidor');
			});
		}
		// Methods self invoking
		getTeamData($stateParams.id);
		vm.requestHasSent();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('TeamsCtrl',['Team', TeamsCtrl]);

	function TeamsCtrl(Team){
		var vm = this;
		// Props
		vm.teams = [];
		vm.filters = {
			cities: ['La Paz', 'El Alto'],
			divisions: ['Junior', 'Senior'],
			categories: ['Medio ambiente'],
			teamThat: {
				requestMembers: true,
				requestMentors: true,
			},
		};
		// Methods
		vm.getTeams = getTeams;
		vm.updateFilter = updateFilter;
		// Methods implementation
		function getTeams(){
			Team.getTeams().then(function(data){
				if(data.success){
					console.log(data);
					vm.teams = data.teams;
				}else{
					alert(data.msg);
				}
			}, function(err){

			});
		};
		function updateFilter(type, arg){
			var index = vm.filters[type].indexOf(arg);
			if(index == -1){
				vm.filters[type].push(arg);
			}else{
				vm.filters[type].splice(index, 1);
			}
		};
		// Methods self invoking
		getTeams();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('CreateTeamCtrl',['$state', 'City', 'Category', 'Division', 'Team', 'Auth', CreateTeamCtrl]);

	function CreateTeamCtrl($state, City, Category, Division, Team, Auth){
		var vm = this;
		// Methods
		vm.getCities = getCities;
		vm.getDivisions = getDivisions
		vm.getCategories = getCategories;
		vm.sendRegistration = sendRegistration;
		// Props
		vm.isNotRegistered = {
			state: false,
			msg: '',
			isLoading: false,
		};
		vm.categoryDesc = '';
		vm.dataRegister = {
			idLeader: Auth.getSession().id,
			teamName: '',
			cityId: 0,
			divisionId: 0,
			img: {},
		};
		vm.cities = [];
		vm.divisions = [];
		vm.categories = [];
		// Methods implementation
		/**
		 * getCities: Hace la llamada al servicio City
		 * 			  para obtener las ciudades de la BD
		 * @return void
		 */
		function getCities(){
			City.getCities().then(function(data){
				if(data.success)
					vm.cities = data.cities;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		/**
		 * getZoes: Hace la llamada al servicio Zone
		 * 			  para obtener las zonas de la BD
		 * @return void
		 */
		function getCategories(){
			Category.getCategories().then(function(data){
				console.log(data)

				if(data.success)
					vm.categories = data.categories;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		/**
		 * getCities: Hace la llamada al servicio Genre
		 * 			  para obtener los tipos de genero
		 * @return void
		 */
		function getDivisions(){
			Division.getDivisions().then(function(data){
				if(data.success)
					vm.divisions = data.divisions;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		function sendRegistration(){
			vm.isNotRegistered.state = false;
			vm.isNotRegistered.isLoading = true;
			// Validar que el retype es igual al password
			Team.registerTeam(vm.dataRegister).then(function(data){
				if(data.success){
					Auth.setHasTeam(true);
					Auth.setIsLeader(true);
					Auth.setTeamId(data.team_id);
					$state.go('user');
				}else{
					vm.isNotRegistered.state = true;
					vm.isNotRegistered.isLoading = false;
					vm.isNotRegistered.msg = data.msg;
				}
			}, function(err){
				vm.isNotRegistered.state = true;
				vm.isNotRegistered.isLoading = false;
				vm.isNotRegistered.msg = data.msg;
			});
		};

		// Method self invoking
		getCities();
		getCategories();
		getDivisions();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('DashboardUserCtrl',['User', 'Auth', 'Team', 'LxNotificationService', DashboardUserCtrl]);

	function DashboardUserCtrl(User, Auth, Team, LxNotificationService){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.userData = {};
		vm.menthors = [];
		vm.students = [];
		vm.emailInvitation = {
			mail: '',
			teamId: 0,
			type: '',
			state: {
				isLoading: false,
				msg: '',
				success: false
			}
		};
		// Methods
		vm.getUserData = getUserData;
		vm.confirmRequest = confirmRequest;
		vm.confirmInvitation = confirmInvitation;
		vm.deleteMembership = deleteMembership;
		vm.sendInvitationEmail = sendInvitationEmail;
		// Methods implementation
		function getUserData(){
			User.getInfo(vm.userCreds.id).then(function(data){
				if(data.success){
					console.log(data.user)
					vm.userData = data.user;
					vm.userData.invitations = angular.equals(data.user.invitations, []) ? false : data.user.invitations;
					if(vm.userData.has_team){
						for (var i = 0; i < vm.userData.team.members.length; i++) {
							if(vm.userData.team.members[i].is_student){
								vm.students.push(vm.userData.team.members[i]);
							}else{
								vm.menthors.push(vm.userData.team.members[i]);
								vm.userData.team.has_menthor = true;
							}
						}
					}
				}else{
					alert(data.msg);
				}
			}, function(err){
				LxNotificationService.error('Hubo un error al descargar sus datos, revise su conexión a internet');
			});
		};
		function confirmRequest(reqId, bool){
			if(bool){
				Team.confirmRequestToJoin({reqId: reqId, accept: bool}).then(function(data){
					if(data.success){
						LxNotificationService.success('El participante fue adicionado a tu equipo');
						vm.getUserData();
					}else{
						LxNotificationService.warning(data.msg);
					}
				}, function(err){
					LxNotificationService.error('Hubo un error en el servidor');
				});
			}else{
				LxNotificationService.confirm('Rechazar solicitud', 'Estas seguro que deseas rechazar la solicitud del participante?',
	            {
	                cancel: 'Cancelar',
	                ok: 'Si, quiero hacerlo'
	            }, function(answer)
	            {
	                if (answer)
	                {
	                	Team.confirmRequestToJoin({reqId: reqId, accept: bool}).then(function(data){
							if(data.success){
								LxNotificationService.success('La solicitud fue eliminada');
								vm.getUserData();
							}else{
								LxNotificationService.warning(data.msg);
							}
						}, function(err){
							LxNotificationService.error('Hubo un error en el servidor');
						});
	                }
	                else
	                {
	                	return;
	                }
	            });
			}
		};
		function confirmInvitation(invitationId, teamId, bool){
			if(bool){
				Team.confirmInvitationFromTeam({invitationId: invitationId, teamId: teamId, accept: bool}).then(function(data){
					if(data.success){
						LxNotificationService.success('Aceptaste la invitación del equipo');
						console.log(data);
						vm.getUserData();
						Auth.setHasTeam(true);
						Auth.setIsLeader(false);
						Auth.setTeamId(data.team_id);
					}else{
						LxNotificationService.warning(data.msg);
					}
				}, function(err){
					LxNotificationService.error('Hubo un error en el servidor');
				});
			}else{
				LxNotificationService.confirm('Rechazar invitación', 'Estas seguro que deseas rechazar la invitación del equipo?',
	            {
	                cancel: 'Cancelar',
	                ok: 'Si, quiero hacerlo'
	            }, function(answer)
	            {
              if (answer)
	                {
	                	Team.confirmInvitationFromTeam({invitationId: invitationId, teamId: teamId, accept: bool}).then(function(data){
										if(data.success){
											LxNotificationService.success('La invitación fue eliminada');
											Auth.setTeamId(teamId);
											Auth.setIsLeader(false);
											Auth.setHasTeam(true);
											vm.userCreds = Auth.getSession();
											vm.getUserData();
										}else{
											LxNotificationService.warning(data.msg);
										}
									}, function(err){
										LxNotificationService.error('Hubo un error en el servidor');
									});
              }
              else
              {
              	return;
              }
            });
			}
		};
		function deleteMembership(memberShipId, invitationId){
			LxNotificationService.confirm('Eliminar membresía', 'Estas seguro que deseas eliminar la membresía del participante?',
					{
							cancel: 'Cancelar',
							ok: 'Si, quiero hacerlo'
					}, function(answer)
					{
						if (answer){
							Team.deleteMembership(memberShipId, invitationId).then(function(data){
								if(data.success){
									console.log(data);
										LxNotificationService.success('El miembro fue eliminado');
										vm.getUserData();
								}else{
									LxNotificationService.warning(data.msg);
								}
							}, function(err){
								LxNotificationService.error('Hubo un error en el servidor');
							});
						}else{
							return;
						}
					}
			);
		};
		function sendInvitationEmail(type){
			vm.emailInvitation.teamId = vm.userData.team.id;
			vm.emailInvitation.type = type;
			vm.emailInvitation.leaderId = vm.userData.id;
			var valid =  /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
			if(vm.emailInvitation.mail == '' || !valid.test(vm.emailInvitation.mail)){
				vm.emailInvitation.state.success = true;
				vm.emailInvitation.state.msg = 'Debes ingresar un correo electrónico';
				return;
			}
			vm.emailInvitation.state.isLoading = true;
			User.sendEmailInvitation(vm.emailInvitation).then(function(data){
				vm.emailInvitation.state.isLoading = false;
				if(data.success){
					$('#mailStudent').modal('hide');
					vm.emailInvitation.mail = '';
					if(data.action == 'EXIST'){
						var teamData = {
							role: data.role,
							teamId: data.team_id,
							uid: data.uid,
						};
						Team.inviteToTeam(teamData).then(function(res){
							LxNotificationService.confirm('Felicitaciones', 'Su invitación fue enviada con éxito', {
								'ok': 'Esta bien',
							}, function(answer){
								return;
							});
						}, function(err){
								LxNotificationService.error('Hubo un error al enviar la invitación');
						});
					}else{
						LxNotificationService.confirm('Felicitaciones', data.msg, {
							'ok': 'Esta bien',
						}, function(answer){
							return;
						});
					}
				}else{
					vm.emailInvitation.state.success = true;
					vm.emailInvitation.state.msg = data.msg;
				}
			}, function(err){
					LxNotificationService.error('Hubo un problema al enviar la invitación');
					vm.emailInvitation.state.success = true;
					vm.emailInvitation.state.isLoading = false;
			});
		}
		// Methods self invoking
		getUserData();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('EditProfileCtrl', ['$state', 'User', 'City', 'Auth', 'Expertise', 'Skill', EditProfileCtrl]);

	function EditProfileCtrl($state, User, City, Auth, Expertise, Skill){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.userData = {};
		vm.cities = [];
		vm.zones = [];
		vm.skills = [];
		vm.expertises = [];
		vm.skillsUser = [];
		// Methods
		vm.getUserData = getUserData;
		vm.getCities = getCities;
		vm.getSkills = getSkills;
		vm.getExpertises = getExpertises;
		vm.update = update;
		// Methods implementation
		function getUserData(){
			User.getInfo(vm.userCreds.id).then(function(data){
				if(data.success){
					vm.userData = data.user;
					vm.userData.bio = vm.userData.bio ? vm.userData.bio.name : '';
				}else{
					alert(data.msg);
				}
			}, function(err){

			});
		};
		/**
		 * getCities: Hace la llamada al servicio City
		 * 			  para obtener las ciudades de la BD
		 * @return void
		 */
		function getCities(){
			City.getCities().then(function(data){
				if(data.success)
					vm.cities = data.cities;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		function getExpertises(){
			Expertise.getExpertises().then(function(data){
				if(data.success)
					vm.expertises = data.expertises;
				else
					console.warn('Hubo un error al cargar los datos');
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		function getSkills(){
			Skill.getSkills().then(function(data){
				if(data.success){
					vm.skills = data.skills;
					vm.skillsUser = data.skills;
				}else{
					console.warn('Hubo un error al cargar los datos');
				}
			}, function(err){
				console.error('Error en el servidor');
			});
		};
		function update(){
			if(vm.userCreds.role == 1){
				User.updateStudent(vm.userData, vm.userData.id).then(function(data){
					if(data.success){
						$state.go('user.my-profile');
					}else{
						alert('Hubo un error, inténtelo nuevamente');
					}
				}, function(err){
					alert('Hubo un error en servidor, revise su conexión a internet');
				});
			}else if(vm.userCreds.role == 2){
				var userData = vm.userData;
				userData.skills = vm.skillsUser;
				User.updateMenthor(userData, vm.userData.id).then(function(data){
				if(data.success){
						$state.go('user.my-profile');
					}else{
						alert('Hubo un error, inténtelo nuevamente');
					}
				}, function(err){
					alert('Hubo un error en servidor, revise su conexión a internet');
				});
			}
		};
		// Methods self invoking
		getUserData();
		getCities();
		getSkills();
		getExpertises();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('HeaderUserCtrl',['User', 'Auth', HeaderUserCtrl]);

	function HeaderUserCtrl(User, Auth){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.hasMinFields = vm.userCreds.minFields;
		// Methods
		vm.logout = logout;

		// Methos implementation
		function logout(){
			Auth.logout();
		};
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('HonorCodeCtrl',['$state', 'User', 'Auth', HonorCodeCtrl]);

	function HonorCodeCtrl($state, User, Auth){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		// Methods
		vm.accept = accept;

		// Methods self invokation
		function accept(){
			User.acceptHonorCode({uid: vm.userCreds.id}).then(function(data){
				if(data.success){
					$state.go('user');
				}else{
					alert('Hubo un error inténtelo nuevamente');
				}
			}, function(err){
				alert('Hubo un error en el servidor');
			});
		};
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('MyProfileCtrl',['User', 'Auth', MyProfileCtrl]);

	function MyProfileCtrl( User, Auth){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.userData = {};
		vm.userImg = {
			newImg: null
		};
		// Methods
		vm.getUserData = getUserData;
		vm.updateImg = updateImg;
		// Methods implementation
		function getUserData(){
			User.getInfo(vm.userCreds.id).then(function(data){
				if(data.success){
					console.log(data.user);
					vm.userData = data.user;
				}else{
					alert(data.msg);
				}
			}, function(err){
				console.error('Hubo un error en el servidor');
			});
		};
		function updateImg(){
			User.updateImage({img: vm.userImg.newImg}, vm.userCreds.id).then(function(data){
				if(data.success){
					vm.userImg.newImg = null;
					getUserData();
				}else{
					console.warn(data.msg);
				}
			}, function(err){
				console.error('Hubo un error en el servidor');
			});
		};
		// Methods self invoking
		getUserData();
	};
})();

(function(){
	'use strict';

	angular.module('heroesDigitalesApp')
		.controller('ParentsAuthCtrl', ['$state', 'User', 'Auth', 'LxNotificationService', ParentsAuthCtrl]);

	function ParentsAuthCtrl($state, User, Auth, LxNotificationService){
		var vm = this;
		// Props
		vm.userCreds = Auth.getSession();
		vm.parents = {
			signature: '',
			email: ''
		}
		// Methods
		vm.accept = accept;
		// Methods implementation
		function accept(){
			User.acceptParentsAuth({uid: vm.userCreds.id, signature: vm.parents.signature, email: vm.parents.email}).then(function(data){
				if(data.success)
				LxNotificationService.confirm('Autorización enviada', data.msg ,{
							ok: 'Entiendo'
					}, function(answer){
						if (answer)
							$state.go('user');
					});
				else
					alert(data.msg);
			}, function(err){
				console.error('Hubo un error en el servidor');
			});
		}
	};
})();
