(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Checkpoint',['Auth', '$http', 'locker', 'PUBLIC_URL' ,'AUTH_URL', Checkpoint]);
	function Checkpoint( Auth, $http, locker, PUBLIC_URL, AUTH_URL){
		return{
		    getCheckpoints: function(stage_id){
          //todo
					var promise = $http({
						url: AUTH_URL + 'stages/' + stage_id + '/checkpoints',
						method: 'GET',
						params: {token: Auth.getSession().token }
					}).then(function(response){
						return response.data;
					});
					return promise;
        },
				getCheckpoint: function(stage_id, check_id){
					var promise = $http({
						url: AUTH_URL + 'stages/' + stage_id + '/checkpoints/' + check_id,
						method: 'GET',
						params: {token: Auth.getSession().token }
					}).then(function(response){
						return response.data;
					});
					return promise;
				},
        createCheckpoint: function(data){
					var promise = $http({
						url: AUTH_URL + 'checkpoints',
						data: data,
						method: 'POST',
						params: {token: Auth.getSession().token }
					}).then(function(response){
						return response.data;
					});
					return promise;
        },
        getQuestions: function(checkId){
          var promise = $http({
						url: AUTH_URL + 'checkpoints/' + checkId + '/questions',
						method: 'GET',
						params: {token: Auth.getSession().token }
					}).then(function(response){
						return response.data;
					});
					return promise;
        },
        createQuestions: function(checkid, data){
					var promise = $http({
						url: AUTH_URL + 'checkpoints/' + checkid +  '/questions',
						data: data,
						method: 'POST',
						params: {token: Auth.getSession().token }
					}).then(function(response){
						return response.data;
					});
					return promise;
        },
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Stage',['Auth', '$http', 'locker', 'PUBLIC_URL' ,'AUTH_URL', Stage]);
	function Stage(Auth, $http, locker, PUBLIC_URL, AUTH_URL){
		return{
		    getStages: function(){
          //todo
					var promise = $http({
						url: PUBLIC_URL + 'stages',
						method: 'GET',
					}).then(function(response){
						return response.data;
					});
					return promise;
        },
				getStage: function(id){
					var promise = $http({
						url: AUTH_URL + 'stages/' + id,
						method: 'GET',
						params: {token: Auth.getSession().token }
					}).then(function(response){
						return response.data;
					});
					return promise;
				},
        createStage: function(data){
					var promise = $http({
						url: AUTH_URL + 'stages',
						data:data,
						method: 'POST',
						params: {token: Auth.getSession().token }
					}).then(function(response){
						return response.data;
					});
					return promise;
        },
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Auth',['$http', '$state', 'locker', 'PUBLIC_URL', Auth]);
	function Auth($http, $state, locker, PUBLIC_URL){
		return{
			setSession: function(uid, rid, username, token, minFields, hasTeam, teamId, isLeader){
				locker.driver('session').put({
					user: {
						id: uid,
						role: rid,
						username: username,
						token: token,
						minFields: minFields,
						hasTeam: hasTeam,
						teamId: teamId,
						isLeader: isLeader,
					}
				});
			},
			hasMinFields: function(){
				return this.getSession().minFields != null;
			},
			hasTeam: function(){
				return this.getSession().hasTeam != null || this.getSession().hasTeam != false;
			},
			setMinFields: function(bool){
				locker.driver('session').put('user', function(curr){
						curr.minFields = bool;
						return curr;
				});
			},
			setToken: function(token){
				locker.driver('session').put('user', function(curr){
						curr.token = token;
						return curr;
				});
			},
			setHasTeam: function(bool){
				locker.driver('session').put('user', function(curr){
						curr.hasTeam = bool;
						return curr;
				});
			},
			setIsLeader: function(bool){
				locker.driver('session').put('user', function(curr){
						curr.isLeader = bool;
						return curr;
				});
			},
			setTeamId: function(teamId){
				locker.driver('session').put('user', function(curr){
						curr.teamId = teamId;
						return curr;
				});
			},
			getSession: function(){
				return locker.driver('session').get('user', null);
			},
			isAuth: function(){
				if (this.getSession() == null)
					return false;
				else
					return this.getSession().token != null;
			},
			login: function(data){
				var promise = $http({
					method: 'POST',
					url: PUBLIC_URL + 'login',
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			logout: function(){
				locker.driver('session').forget('user');
				$state.go('home');
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Expert',['$http', 'Auth', 'PUBLIC_URL', 'AUTH_URL', Expert]);
	function Expert($http, Auth, PUBLIC_URL, AUTH_URL){
		return{
			getExperts: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'experts',
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Judge',['$http', 'Auth', 'PUBLIC_URL', 'AUTH_URL', Judge]);
	function Judge($http, Auth, PUBLIC_URL, AUTH_URL){
		return{
			getJudges: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'judges',
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Mentor',['$http', 'Auth', 'PUBLIC_URL', 'AUTH_URL', Mentor]);
	function Mentor($http, Auth, PUBLIC_URL, AUTH_URL){
		return{
			getMentors: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'mentors',
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('CV',['$http', 'PUBLIC_URL', 'AUTH_URL', 'Auth', CV]);
	function CV($http, PUBLIC_URL, AUTH_URL, Auth){
		return{
			getCV: function(name){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'cv/'+name,
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Expertise', ['$http', 'PUBLIC_URL', 'AUTH_URL', 'Auth',Expertise]);
	function Expertise($http, PUBLIC_URL, AUTH_URL, Auth){
		return{
			getExpertises: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'expertises',
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Request', ['$http', 'PUBLIC_URL', 'AUTH_URL', 'Auth', Request]);
	function Request($http, PUBLIC_URL, AUTH_URL, Auth){
		return{
			confirmRequest: function(data){
				var promise = $http({
					method: 'PUT',
					url: AUTH_URL + 'request',
					data: data,
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Skill',['$http', 'PUBLIC_URL', 'AUTH_URL', 'Auth', Skill]);
	function Skill($http, PUBLIC_URL, AUTH_URL, Auth){
		return{
			getSkills: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'skills',
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('City',['$http', 'PUBLIC_URL', City]);
	function City($http, PUBLIC_URL){
		return{
			getCities: function(){
				var promise = $http({
					method: 'GET',
					url: PUBLIC_URL + 'cities'
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Genre',['$http', 'PUBLIC_URL', Genre]);
	function Genre( $http, PUBLIC_URL){
		return{
			getGenres: function(){
				var promise = $http({
					method: 'GET',
					url: PUBLIC_URL + 'genres'
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Register',['$http', 'Upload', 'PUBLIC_URL', Register]);
	function Register($http, Upload, PUBLIC_URL){
		return{
			register: function(data){
				var promise = Upload.upload({
					method: 'POST',
					url: PUBLIC_URL + 'register',
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Shirt',['$http', 'PUBLIC_URL', Shirt]);
	function Shirt( $http, PUBLIC_URL){
		return{
			getShirts: function(){
				var promise = $http({
					method: 'GET',
					url: PUBLIC_URL + 'shirts'
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Student',['$http', 'Auth', 'PUBLIC_URL', 'AUTH_URL', Student]);
	function Student($http, Auth, PUBLIC_URL, AUTH_URL){
		return{
			parentAuth: function(data){
				var promise = $http({
					method: 'PUT',
					url: PUBLIC_URL + 'user/parents-auth',
					data: data,
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			getStudents: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'students',
					params: {token: Auth.getSession().token }
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Category', ['$http', 'Auth', 'PUBLIC_URL', 'AUTH_URL',Category]);
	function Category($http, Auth, PUBLIC_URL, AUTH_URL){
		return{
			getCategories: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'categories',
					params: {token: Auth.getSession().token}
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Division', ['$http', 'Auth', 'PUBLIC_URL', 'AUTH_URL',Division]);
	function Division($http, Auth, PUBLIC_URL, AUTH_URL){
		return{
			getDivisions: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'divisions',
					params: {token: Auth.getSession().token}
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('Team',['$http', 'Upload', 'Auth', 'PUBLIC_URL', 'AUTH_URL', Team]);
	function Team($http, Upload, Auth, PUBLIC_URL, AUTH_URL){
		return{
			registerTeam: function(data){
				var promise = Upload.upload({
					method: 'POST',
					url: AUTH_URL + 'team',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			getTeams: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'team',
					params: {token: Auth.getSession().token },
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			getTeamsAdmin: function(){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'team-admin',
					params: {token: Auth.getSession().token },
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			getTeam: function(id){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'team/'+ id,
					params: {token: Auth.getSession().token },
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			editTeam: function(data){
				var promise = $http({
					method: 'PUT',
					url: AUTH_URL + 'team',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			editTeamImg: function(data){
				var promise = Upload.upload({
					method: 'POST',
					url: AUTH_URL + 'team/img',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			requestJoin: function(data){
				var promise = $http({
					method: 'POST',
					url: AUTH_URL + 'team/member',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			confirmRequestToJoin: function(data){
				var promise = $http({
					method: 'PUT',
					url: AUTH_URL + 'team/member',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			inviteToTeam: function(data){
				var promise = $http({
					method: 'POST',
					url: AUTH_URL + 'team/invitation',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			confirmInvitationFromTeam: function(data){
				var promise = $http({
					method: 'PUT',
					url: AUTH_URL + 'team/invitation',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			deleteMembership: function(memberId, invitationId){
				var promise = $http({
					method: 'DELETE',
					url: AUTH_URL + 'team/member/'+memberId+'/invitation/'+invitationId,
					params: {token: Auth.getSession().token },
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			deleteTeam: function(teamId){
				var promise = $http({
					method: 'DELETE',
					url: AUTH_URL + 'team/' + teamId,
					params: {token: Auth.getSession().token },
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
		};
	};
})();

(function(){
	'use strict';
	angular.module('heroesDigitalesApp')
		.factory('User',['$http', 'Upload', 'Auth', 'PUBLIC_URL', 'AUTH_URL', User]);
	function User($http, Upload, Auth, PUBLIC_URL, AUTH_URL){
		return{
			confirmEmail: function(data){
				var promise = $http({
					method: 'POST',
					url: PUBLIC_URL + 'creds-verification',
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			sendVerifEmail: function(data){
				var promise = $http({
					method: 'POST',
					url: PUBLIC_URL + 'send-verification-email',
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			resetPassword: function(data){
				var promise = $http({
					method: 'PUT',
					url: PUBLIC_URL + 'reset-password',
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			acceptHonorCode: function(data){
				var promise = $http({
					method: 'POST',
					url: AUTH_URL + 'user/honor-code',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			acceptParentsAuth: function(data){
				var promise = $http({
					method: 'POST',
					url: AUTH_URL + 'user/parents-auth',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			getInfo: function(id){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'user/'+id,
					params: {token: Auth.getSession().token },
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			updateStudent: function(data, id){
				var promise = $http({
					method: 'PUT',
					url: AUTH_URL + 'user/student/edit/' + id,
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			updateMenthor: function(data, id){
				var promise = $http({
					method: 'PUT',
					url: AUTH_URL + 'user/mentor/edit/' + id,
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			updateImage: function(data, id){
				var promise = Upload.upload({
					method: 'POST',
					url: AUTH_URL + 'user/edit/img/'+id,
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			requestHasSent: function(teamId, uid, role){
				var promise = $http({
					method: 'GET',
					url: AUTH_URL + 'team/member/invitation/'+teamId+'/'+uid+'/'+role,
					params: {token: Auth.getSession().token },
				}).then(function(response){
					return response.data;
				});
				return promise;
			},
			sendEmailInvitation: function(data){
				var promise = Upload.upload({
					method: 'POST',
					url: AUTH_URL + 'user/email-invitation',
					params: {token: Auth.getSession().token },
					data: data
				}).then(function(response){
					return response.data;
				});
				return promise;
			}
		};
	};
})();
